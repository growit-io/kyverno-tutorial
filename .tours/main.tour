{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Kyverno Tutorial",
  "description": "Discover how Kyverno enforces policies in Kubernetes clusters, focusing on labeling for proper resource ownership and alert routing.",
  "steps": [
    {
      "title": "Introduction",
      "description": "Welcome! ðŸš€ This tutorial guides you through using Kyverno to enforce policies within a Kubernetes cluster, ensuring that resources have appropriate labels for ownership and alert routing. This implements the \"[you build it, you run it](https://aws.amazon.com/blogs/enterprise-strategy/enterprise-devops-why-you-should-run-what-you-build/)\" principle, streamlining alert management for development and operations teams.",
      "file": "README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors",
        "workbench.action.closePanel",
        "workbench.files.action.collapseExplorerFolders"
      ]
    },
    {
      "title": "Deploy Basic Initial Configuration",
      "description": "We'll start by creating a Kubernetes cluster with Argo CD, Prometheus, and Kyverno, deploying a sample app to demonstrate our concept. Use the command:\n\n>> hatch run tutorial up\n\nThis sets up our initial stage with default configurations. While this is running, we can already proceed to review the essential components...",
      "file": "charts/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Understanding Argo CD",
      "description": "Argo CD deploys applications from Git repositories to Kubernetes. It's pivotal for declaring resource ownership, but cannot propagate labels on its own. We'll bridge this gap in this tutorial with Kyverno.",
      "file": "charts/argo-cd/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Leveraging Prometheus",
      "description": "Prometheus plays a crucial role in monitoring and alerting. Our aim is to ensure it routes alerts based on resource labels, separating concerns between application and platform operations teams. We'll use Kyverno to enforce the transfer of resource labels onto metrics during ingestion.",
      "file": "charts/monitoring/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Kyverno's Key Role",
      "description": "In this scenario, Kyverno automates label propagation and ensures Prometheus's alert routing aligns with our organizational policies, making it essential for our governance strategy.",
      "file": "charts/kyverno/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Validate Argo CD Setup",
      "description": "Once the basic initial configuration is deployed, use the command:\n\n>> hatch run tutorial port-forward argo-cd\n\nThis starts a background process that makes Argo CD accessible from outside the Kubernetes cluster, and prints the password for the \"admin\" user.\n\nLog in to confirm that Argo CD is correctly installed and the guestbook application is deployed.",
      "file": "charts/argo-cd/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Inspect Prometheus Configuration",
      "description": "Use the command:\n\n>> hatch run tutorial port-forward prometheus\n\nThis starts a background process that makes Prometheus accessible from outside the Kubernetes cluster.\n\nExamine Prometheus's setup, and review some alert definitions. Take a closer look at the `TargetDown` alert's expression and some of the alerts related to `Pod` and `Deployment` resources.  Initially, Prometheus metrics and the alert definitions won't have the custom labeling necessary for our routing strategy.\n",
      "file": "charts/monitoring/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Introduce Ownership Labels",
      "description": "Inspect the output of the following command:\n\n>> kubectl get all -A -l example.com/team=application-team\n\nThere are no resources to show, because our resources currently lack our custom ownership label. This is an issue for alert routing.\n\nWe'll correct this with Kyverno policies that automatically apply these labels to the appropriate resources, and we'll ensure that Prometheus incorporates the label into its metrics and alert routing logic.",
      "file": "charts/guestbook/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "description": "The Kyverno `ClusterPolicy` resource allows users to define cluster-wide policies for enforcing governance and compliance within Kubernetes clusters; for more details, refer to the [Kyverno documentation](https://kyverno.io/docs/kyverno-policies/).",
      "file": "charts/kyverno-policies/templates/argo-cd/propagate-application-team-label.yaml",
      "pattern": "kind: ClusterPolicy"
    },
    {
      "description": "This policy ensures that our custom ownership label, `example.com/team`, is propagated from an Argo CD `Application` object to all resources belonging to that application. In some cases, it will also cascade to indirectly managed resources, such as `Pods` created by a `Deployment`.",
      "file": "charts/kyverno-policies/templates/argo-cd/propagate-application-team-label.yaml",
      "pattern": "name: propagate-application-team-label",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 2,
          "character": 1
        }
      }
    },
    {
      "description": "The field `policies.kyverno.io/description` and other metadata fields can be used to document the policy and tools like [Policy Reporter](https://kyverno.github.io/policy-reporter/) will use this information to present policies and reports in a structured and human-friendly way.",
      "file": "charts/kyverno-policies/templates/argo-cd/propagate-application-team-label.yaml",
      "pattern": "policies.kyverno.io/description"
    },
    {
      "description": "Since this policy is defined as a template in a Helm chart and many expressions in Kyverno policies use a similar syntax based on Go template, we must escape expressions intended for Kyverno using the \"{{\\`...\\`}}\" syntax, so that they are not accidentally interpreted by Helm.\n\nHowever, we can still embed Helm parameters if we want to make the policy customizable at installation time. In this policy, we mainly wish to make the name of the label which carries the team ownership information customizable.",
      "file": "charts/kyverno-policies/templates/argo-cd/propagate-application-team-label.yaml",
      "pattern": "{{`.+`}}"
    },
    {
      "description": "The first rule of this policy propagates our team ownership label from Argo CD apps to their *directly* managed resources. This rule matches *any* kind of Kubernetes resource, as long as it has an `argocd.argoproj.io/instance` label with a non-empty value to indicate that it is a *tracked resource* that is part of an Argo CD application.",
      "file": "charts/kyverno-policies/templates/argo-cd/propagate-application-team-label.yaml",
      "pattern": "name: copy-app-team-label-to-instance"
    },
    {
      "description": "The second rule of this policy implements propagation of the team ownership label from directly managed (tracked) resources to indirectly managed resources, specifically from any known resource that creates `Pods` from templates. This is necessary as, for example, a label on a `Pod` controller such as a `Deployment` resource is not automatically inherited by `Pods` created by the controller, unless the respective label is also copied to the `.spec.template.metadata.labels` property of the controller resource.",
      "file": "charts/kyverno-policies/templates/argo-cd/propagate-application-team-label.yaml",
      "pattern": "name: copy-team-label-to-pod-template"
    },
    {
      "description": "Our next policy ensures that all `ServiceMonitor` and `PodMonitor` resources are configured to make Prometheus transfer the scraped target's team ownership label, `example.com/team` in this tutorial, onto the ingested metrics. The ingested metrics will record this information in the `example_com_team` label, because \".\" and \"/\" are special characters that aren't allowed in Prometheus metric names.",
      "file": "charts/kyverno-policies/templates/prometheus/scrape-team-target-label.yaml",
      "pattern": "name: scrape-team-target-label"
    },
    {
      "description": "The first rule of this policy targets all `PodMonitor` resources in the cluster and makes sure that they always have a `podTargetLabels` property which includes our team ownership label.\n\nTo describe this property, you can use the command:\n\n>> kubectl explain PodMonitor.spec.podTargetLabels",
      "file": "charts/kyverno-policies/templates/prometheus/scrape-team-target-label.yaml",
      "pattern": "name: inject-pod-target-label"
    },
    {
      "description": "The second rule is only a small variation of first rule. It targets all `ServiceMonitor` resources in the cluster and makes sure that they always have a `targetLabels` property which includes our team ownership label.\n\nTo describe this property, you can use the command:\n\n>> kubectl explain ServiceMonitor.spec.targetLabels",
      "file": "charts/kyverno-policies/templates/prometheus/scrape-team-target-label.yaml",
      "pattern": "name: inject-target-label"
    },
    {
      "description": "With our policies ready, upgrade our deployment to install and apply them across the board. Use the commands:\n\n>> helm uninstall -n default guestbook\n\n>> hatch run tutorial up --production --force kyverno-policies monitoring guestbook\n\nThis upgrades relevant Helm charts in the correct order with parameters from `values.yaml` and `values-production.yaml` merged.",
      "title": "Deploy Final Working Configuration",
      "file": "charts/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Verify Resource Labeling",
      "description": "Post-upgrade, all of our guestbook application resources should now carry the `example.com/team` label, and Prometheus should transfer that label to all metrics. Use the commands:\n\n>> kubectl get all,servicemonitor -A -l example.com/team=application-team\n\n>> kubectl get servicemonitor -A -o 'custom-columns=NAMESPACE:.metadata.namespace,NAME:..metadata.name,TARGET LABELS:.spec.targetLabels[*]'\n\nThis step confirms that both Kyverno policies are correctly applied and working as expected.",
      "file": "charts/guestbook/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "title": "Check Prometheus Alert Routing",
      "description": "With our labels in place, alerts generated by Prometheus should now route according to team ownership, using the `responder` label. Verify this by inspecting alerts and metrics in Prometheus. Also review the expressions of some of alerts and notice that they now use `example_com_team` as an additional aggregation label, or enrich alerts with labels from the `kube_*_labels` metric.",
      "file": "charts/monitoring/README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors"
      ]
    },
    {
      "file": "charts/policy-reporter/README.md",
      "description": "Use the command:\n\n>> hatch run tutorial port-forward policy-reporter\n\nThis makes the Policy Reporter UI accessible from outside the Kubernetes cluster.\n\nYou can use it to review the installed Kyveno policies and their associated status reports.",
      "line": 1,
      "title": "Review Kyverno Policy Reports"
    },
    {
      "title": "Conclusion",
      "description": "Congratulations! ðŸŽ‰ You've configured a Kubernetes environment where resource ownership is clearly defined, and alerts are routed accordingly. Explore further by adjusting policies and configurations to fit your specific needs.\n\nWhen you're done, this command will tear down the tutorial environment:\n\n>> hatch run tutorial down",
      "file": "README.md",
      "line": 1,
      "commands": [
        "workbench.action.closeOtherEditors",
        "workbench.action.closePanel",
        "workbench.files.action.collapseExplorerFolders"
      ]
    }
  ],
  "isPrimary": true
}